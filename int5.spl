//physical address of SP
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// Get system call no. from the stack and put it in a register
alias syscallno S1;
syscallno = [physicalSP - 1];

alias currentPID S2;//CurrentPID
currentPID = (PTBR - 1024)/8;

if ( syscallno == 8) then
	alias temp S3;
	temp = 0;
	alias newPID S4;
	newPID = -1;
	//---Checking for an free PCB
	while ( temp < 32) do	
		if( [READY_LIST + temp*32 + 1] == 0) then
			newPID = temp;//noting the empty PCB value
			//print(temp);
			break;
		endif;
		temp = temp + 1;	
	endwhile;	
	//---if no free PCB found return back with -1
	if( newPID == -1) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	//allocating PID for new process
	[READY_LIST + newPID*32 + 0] = newPID;
	//print("newPID");
	//print(newPID);
	//caluclating total no pages used by parent process
	temp = 0;
	alias temp2 S6;
	temp2 = 0;
	while( temp < 4) do
		if([PTBR+ temp*2] != -1)then
			temp2 = temp2 + 1;
		endif;
		temp = temp + 1;
	endwhile;
	//print("pages");
	//print(temp);
	//checking wether enough no of memory pages process are available or not
	alias counter S5;
	counter = 0;
	temp = 0;
	while ( counter < 64 ) do
		if ( [1280 + counter] == 0 ) then
			temp = temp +1;
		endif;
		counter = counter + 1;	
	endwhile;
	//if sufficient no of pages are not available return with -1
	if( temp < temp2 ) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	//
	counter = 0;
	while ( counter < 64 && temp2 > 0) do
		if ( [1280 + counter] == 0 ) then
			temp2 = temp2 -1;
			[1280 + counter] = 1;
			temp = 0;
			while( temp < 512) do
				[temp + counter*512] = [temp + [PTBR+ temp2*2]*512];//copying word by word of each page of current process
				temp = temp + 1;
			endwhile;
			[newPID*8 + 1024 + temp2*2]= counter;//copying page number to PTBR of child process
			[newPID*8 + 1024 + temp2*2 + 1]= [PTBR+ temp2*2 + 1];//copying auxillary information of each page to PTBR of child process 
		endif;
		counter = counter + 1;
	endwhile;
	[READY_LIST + newPID*32 + 5] = newPID*8 + 1024;//Updating value of PTBR in PCB of child process 
	[READY_LIST + newPID*32 + 4] = [physicalSP];//Storing the IP value into child process
	//Storing the SP value into child process
	[READY_LIST + newPID*32 + 3] = SP - 1;// Here SP is set to SP-1
	//i.e because in parent process when control returns value on top of stack is removed by IRET , this doesn't happen in child process so we do it manually.
	//-- Storing all registers values
	[READY_LIST + newPID*32 + 2] = BP;
	[READY_LIST + newPID*32 + 6] = 4;
	[READY_LIST + newPID*32 + 7] = R0;
	[READY_LIST + newPID*32 + 8] = R1;
	[READY_LIST + newPID*32 + 9] = R2;
	[READY_LIST + newPID*32 + 10] = R3;
	[READY_LIST + newPID*32 + 11] = R4;
	[READY_LIST + newPID*32 + 12] = R5;
	[READY_LIST + newPID*32 + 13] = R6;
	[READY_LIST + newPID*32 + 14] = R7;
	[READY_LIST + newPID*32 + 31] = currentPID;
	//Per process page table
	temp = 0;
	while( temp < 16) do
		[READY_LIST + 15 + newPID*32 + temp + 0] = [READY_LIST + 15 + currentPID*32 + temp + 0];
		[READY_LIST + 15 + newPID*32 + temp + 1] = [READY_LIST + 15 + currentPID*32 + temp + 1];
		counter = [READY_LIST + 15 + currentPID*32 + temp + 0];
		if ( [READY_LIST + 15 + currentPID*32 + temp + 0] != -1 ) then
			[ FILE_TABLE + counter*2 + 1] = [ FILE_TABLE + counter*2 + 1] + 1;// incrementing entry of open filr count in SWOFT
		endif;
		temp = temp + 2;
	endwhile;
	//Setting state of child process as ready
	[READY_LIST + newPID*32 + 1] = 1;
	//returning the PID of child-process to parent-process
	//physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	//child PTBR from line 79
	//child SP from line 83
	counter = SP - 1;
	[([newPID*8 + 1024 + 2 * (counter / 512)] * 512) + (counter % 512) - 1 ] = -2;
	//[[newPID*8 + 1024]*512+ SP - 2] = -2;
	[physicalSP - 2] = newPID;
	//print("EOI");
	ireturn;
endif;
ireturn;
